{"version":3,"sources":["webpack:///path---blocking-queue-array-blocking-queue-c43dadcdf7459cfbb264.js","webpack:///./.cache/json/blocking-queue-array-blocking-queue.json"],"names":["webpackJsonp","523","module","exports","data","markdownRemark","html","frontmatter","date","path","title","author","dsct","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAA2toDC,aAAsmBC,KAAA,iBAAAC,KAAA,oCAAAC,MAAA,wCAAAC,OAAA,aAAAC,KAAA,QAAuJC","file":"path---blocking-queue-array-blocking-queue-c43dadcdf7459cfbb264.js","sourcesContent":["webpackJsonp([93423786701270],{\n\n/***/ 523:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>一 简述</h1>\\n<p>API文档阅读理解的信息：</p>\\n<p>一种支持额外操作的队列接口(BlockingQueue)，当队列为空的时候，向队列获取元素可以一直等到队列转换为<strong>非空状态</strong>。而当队列已满的时候，从队列获取元素可以一直等到队列已腾出空间。</p>\\n<p>队列的操作方法大致可以分为四种类型</p>\\n<ol>\\n<li>队列满或空的时候，插入或删除元素抛出异常</li>\\n<li>队列满或空的时候，插入或删除元素返回一个特殊值(null或者false)</li>\\n<li>队列满或空的时候，插入或删除元素的线程阻塞直到操作成功</li>\\n<li>队列满或空的时候，插入或删除元素的线程会阻塞一个指定的时长然后放弃</li>\\n</ol>\\n<table>\\n<thead>\\n<tr>\\n<th>操作</th>\\n<th>抛出异常</th>\\n<th>返回特殊值</th>\\n<th>阻塞</th>\\n<th>限时阻塞</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>插入</td>\\n<td>add(e)</td>\\n<td>offer(e)</td>\\n<td>put(e)</td>\\n<td>offer(e, time, unit)</td>\\n</tr>\\n<tr>\\n<td>删除</td>\\n<td>remove()</td>\\n<td>poll()</td>\\n<td>take()</td>\\n<td>poll(time, unit)</td>\\n</tr>\\n<tr>\\n<td>检查</td>\\n<td>element()</td>\\n<td>peek()</td>\\n<td></td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>注：此表出自api文档</p>\\n<p><strong>阻塞队列不接受null元素，它的一系列实现类都会在尝试插入null时抛出空指针异常。</strong></p>\\n<p>阻塞队列不同的实现会对队列长度有不同的定义。不被限制容量的队列的剩余长度是Integer.MAX。</p>\\n<p>阻塞队列是线程安全的，大多数是基于内部锁或者其他同步机制实现。不过批量操作比如<strong>addAll,containsAll,retainAll和removeAll不一定安全。</strong></p>\\n<p>另外，阻塞队列十分适合应用于“生产-消费者模型”的场景。</p>\\n<h1>二 典型实现 ArrayBlockingQueue</h1>\\n<p>基于数组实现的长度一定的阻塞队列，这个队列保持着FIFO先进先出的顺序。队首的元素是在队列中保存时间最长的；队尾的元素是在队列中保存时间最短的。新的元素入队都是加入到队尾，元素出队都是从队首元素获取。</p>\\n<p>作为一个典型的<strong>指定长度的阻塞队列</strong>，一旦被创建，这个队列的长度就不会再改变。向已满的队列插入元素和向空队列获取元素都可以进入阻塞状态。</p>\\n<p><strong>支持遍历器的通用操作</strong></p>\\n<h2>2.1 类成员</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token comment\\\">/** The queued items */</span>\\n    <span class=\\\"token keyword\\\">final</span> Object<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> items<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/** items index for next take, poll, peek or remove */</span>\\n    <span class=\\\"token keyword\\\">int</span> takeIndex<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/** items index for next put, offer, or add */</span>\\n    <span class=\\\"token keyword\\\">int</span> putIndex<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/** Number of elements in the queue */</span>\\n    <span class=\\\"token keyword\\\">int</span> count<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/*\\n     * Concurrency control uses the classic two-condition algorithm\\n     * found in any textbook.\\n     */</span>\\n\\n    <span class=\\\"token comment\\\">/** Main lock guarding all access */</span>\\n    <span class=\\\"token keyword\\\">final</span> ReentrantLock lock<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/** Condition for waiting takes */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> Condition notEmpty<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/** Condition for waiting puts */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> Condition notFull<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/**\\n     * Shared state for currently active iterators, or null if there\\n     * are known not to be any.  Allows queue operations to update\\n     * iterator state.\\n     */</span>\\n    <span class=\\\"token keyword\\\">transient</span> Itrs itrs <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>items：用于容纳队列中元素的底层对象数组。注意关键字<strong>final</strong>，也就是说一旦被初始化，这个数组的长度就是不可变的。</li>\\n<li>takeIndex：阻塞队列内部维护的一个“指针”，这是一个队列的“尾指针”。指向队列中即将被删除、出队的元素</li>\\n<li>putIndex：阻塞队列内部维护的另一个“指针”，这是一个队列的“头指针”。指向队列中刚刚被插入的元素</li>\\n<li>count：队列中的size字段</li>\\n</ul>\\n<p>这个阻塞队列的实现里总计有一个锁lock、两个条件对象notEmpty与notFull，分别用于不同的场景</p>\\n<ul>\\n<li>lock：用于数据访问保护的锁</li>\\n<li>notEmpty 队列非空条件，用于获取元素时的场景</li>\\n<li>notFull 队列未满条件，用于插入元素时的场景</li>\\n</ul>\\n<p>这里可以着重了解一下源代码中关于这两个condition对象notEmpty与notFull的应用方式。这本身就是lock对象比synchronized关键字的同步控制更为精细的地方，如何为线程分组，如何去更细粒度的控制唤醒指定的线程组。</p>\\n<p><strong>同时由于只有一个retreenlock实例，所以不会真正的存在结构性修改的方法并行的场景，这些结构性修改方法都是互斥的。</strong></p>\\n<h2>2.2 方法API</h2>\\n<h3>2.2.1 构造函数</h3>\\n<p>注意在编写了三个含参的构造函数后，没有给出无参构造。这个阻塞队列因此就没有无参构造。所有的构造函数都要求给出具体的队列size值。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token comment\\\">//指定队列容量的构造，默认是一个非公平阻塞队列</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">ArrayBlockingQueue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> capacity<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">(</span>capacity<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token comment\\\">//指定队列容量和队列公平性的阻塞队列，这里初始化锁对象和两个条件对象，指定lock为公平锁</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">ArrayBlockingQueue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> capacity<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">boolean</span> fair<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>capacity <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>items <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">[</span>capacity<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ReentrantLock</span><span class=\\\"token punctuation\\\">(</span>fair<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        notEmpty <span class=\\\"token operator\\\">=</span> lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">newCondition</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        notFull <span class=\\\"token operator\\\">=</span>  lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">newCondition</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token comment\\\">//初始化队列容量、公平策略和来自另一个集合的元素。内部调用前一个包含两个参数的构造。这里的初始化队列元素的部分开始加锁操作。元素顺序遵从集合c的便利顺序。加锁是为了数据在各个线程间的可见性而不是为了保证互斥性。不过正常的逻辑都是先初始化，再有结构性修改。</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">ArrayBlockingQueue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> capacity<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">boolean</span> fair<span class=\\\"token punctuation\\\">,</span>\\n                              Collection<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">E</span><span class=\\\"token operator\\\">></span> c<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">(</span>capacity<span class=\\\"token punctuation\\\">,</span> fair<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Lock only for visibility, not mutual exclusion</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>E e <span class=\\\"token operator\\\">:</span> c<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token function\\\">checkNotNull</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    items<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//“头插”的顺序</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">ArrayIndexOutOfBoundsException</span> ex<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            count <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 循环结束后累加队列size值</span>\\n            putIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">==</span> capacity<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">:</span> i<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 更新用于插入操作的索引，判断这个值目前还是不是0</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 释放锁</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>2.2.2 插入操作</h3>\\n<p><strong>返回true or false的offer入队操作</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">offer</span><span class=\\\"token punctuation\\\">(</span>E e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">checkNotNull</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">==</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//队列已满则返回false表示插入失败</span>\\n            <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token function\\\">enqueue</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    \\n    <span class=\\\"token comment\\\">/**\\n     * Inserts element at current put position, advances, and signals.\\n     * Call only when holding lock.\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">enqueue</span><span class=\\\"token punctuation\\\">(</span>E x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// assert lock.getHoldCount() == 1;</span>\\n        <span class=\\\"token comment\\\">// assert items[putIndex] == null;</span>\\n        <span class=\\\"token keyword\\\">final</span> Object<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">;</span>\\n        items<span class=\\\"token punctuation\\\">[</span>putIndex<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">++</span>putIndex <span class=\\\"token operator\\\">==</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span>\\n            putIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n        count<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n        notEmpty<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">signal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//唤醒一个因为队列为空导致等待的线程，notEmpty为非空条件condition对象。很灵活</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>offer入队操作，注意因为队列不能插入null，所以在check方法里面如果检查到e是null的话会抛出NPE。除此之外，这个方法本身的入队操作只会依据操作结果返回<strong>true或者false</strong>。</p>\\n<p>这里可以看到该队列中的加锁固定格式</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ReentrantLock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//加锁</span>\\n    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n        \\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//finally子句释放锁</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><strong>可以抛出异常的add插入元素</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>E e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">--</span><span class=\\\"token keyword\\\">super</span><span class=\\\"token operator\\\">--</span>\\n    <span class=\\\"token comment\\\">//java.util.AbstractQueue.add(E)</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>E e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">offer</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">else</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IllegalStateException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Queue full\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>可以看到阻塞队列的add操作调用父类的add操作，而父类的add操作还是会因为多态的关系调用到具体实现类里面的offer入队操作。如果插入成功就返回true，否则会抛出<strong>IllegalStateException</strong>。那么对应的，这里除了这个异常，因为调用了原来的offer方法的缘故，也有可能抛出NPE异常。</p>\\n<p>能看到这里也体现了一定的层次结构的设计思想，达到的代码和方法的复用的目的，先从最基础的方法开始编写，然后依次嵌套或者包装写出能达到特定目的的方法。比如这里的offer与add之间的关系。</p>\\n<p>AbstractQueue就是根据前述的方法表格来做了一定的规范限制和方法调用关系限制。后面的具体实现类只要按照标准去实现就好了。整个类的结构看起来就会比较清晰，也会少很多代码的冗余。</p>\\n<p><strong>会阻塞的put方法</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token comment\\\">/**\\n     * Inserts the specified element at the tail of this queue, waiting\\n     * for space to become available if the queue is full.\\n     *\\n     * @throws InterruptedException {@inheritDoc}\\n     * @throws NullPointerException {@inheritDoc}\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span>E e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">checkNotNull</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lockInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">==</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//检查队列长度是否已满，如果满了就进入await方法。其余的出队操作会在操作末尾调用notFull.signal()下次被唤醒再次进入while循环判断一次。直到队列空出类为止。这里的逻辑类似于“double check”</span>\\n                notFull<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token function\\\">enqueue</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//检查通过执行入队操作</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>然后是会阻塞等待的put方法。这个方法会在当队列已满的时候，向其中插入元素会形成阻塞直到插入元素。</p>\\n<p>ps 方法<strong>lock.lockInterruptibly()？</strong></p>\\n<p><strong>限时阻塞的offer</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">offer</span><span class=\\\"token punctuation\\\">(</span>E e<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">long</span> timeout<span class=\\\"token punctuation\\\">,</span> TimeUnit unit<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n\\n        <span class=\\\"token function\\\">checkNotNull</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">long</span> nanos <span class=\\\"token operator\\\">=</span> unit<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toNanos</span><span class=\\\"token punctuation\\\">(</span>timeout<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lockInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">==</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nanos <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                nanos <span class=\\\"token operator\\\">=</span> notFull<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">awaitNanos</span><span class=\\\"token punctuation\\\">(</span>nanos<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token function\\\">enqueue</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n</code></pre>\\n      </div>\\n<p>限时等待方法，注意里面的一个方法<strong>notFull.awaitNanos()</strong>。这个方法不仅仅是API里面用。平时我们自己用作限时等待的场景时，也会用起来很顺手。搭配while循环来使用。</p>\\n<h3>2.2.3 删除队首元素</h3>\\n<p>首先还是从会被复用的基础出队方法开始</p>\\n<p><strong>返回被删除元素或者null的poll</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> E <span class=\\\"token function\\\">poll</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> null <span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">dequeue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token comment\\\">/**\\n     * Extracts element at current take position, advances, and signals.\\n     * Call only when holding lock.\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> E <span class=\\\"token function\\\">dequeue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// assert lock.getHoldCount() == 1;</span>\\n        <span class=\\\"token comment\\\">// assert items[takeIndex] != null;</span>\\n        <span class=\\\"token keyword\\\">final</span> Object<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token annotation punctuation\\\">@SuppressWarnings</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"unchecked\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n        E x <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>E<span class=\\\"token punctuation\\\">)</span> items<span class=\\\"token punctuation\\\">[</span>takeIndex<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        items<span class=\\\"token punctuation\\\">[</span>takeIndex<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//因为这个索引位置的元素已经出队，所以将该位置置空</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">++</span>takeIndex <span class=\\\"token operator\\\">==</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//循环数组的操作，如果出队操作已经走到了队尾，那么久重置索引的位置到队首</span>\\n            takeIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n        count<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>itrs <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span>\\n            itrs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">elementDequeued</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">//TODO</span>\\n        notFull<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">signal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> x<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>与前面一节的入队操作类似，这里有一个单独的如对操作，但是这个方法是有使用条件的，那就是<strong>加锁同步</strong>，不过我们没有在方法里面进行同步，而是要求调用dequeue方法的方法做同步工作。<strong>该方法会返回出队元素或者是返回null。</strong></p>\\n<p><strong>返回true或false的remove(e)</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">remove</span><span class=\\\"token punctuation\\\">(</span>Object o<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>o <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> Object<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> putIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>putIndex<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> takeIndex<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>o<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>items<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">removeAt</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">++</span>i <span class=\\\"token operator\\\">==</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span>\\n                        i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">!=</span> putIndex<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n</code></pre>\\n      </div>\\n<ul>\\n<li>删除指定元素的remove(e)方法。该方法匹配元素的原则是equals方法达成匹配。删除的具体操作在方法removeAt方法中。</li>\\n<li>如果队列中包含多个相同元素，那么只会删除遍历到的第一个元素。</li>\\n<li>删除成功返回true，否则返回false</li>\\n<li>遍历的原则是从takeIndex开始将整个内部数组遍历一遍直到遍历到索引putIndex为止。找到对应元素的位置后就可以调用removeAt来删除指定的元素。</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">removeAt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> removeIndex<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// assert lock.getHoldCount() == 1;</span>\\n        <span class=\\\"token comment\\\">// assert items[removeIndex] != null;</span>\\n        <span class=\\\"token comment\\\">// assert removeIndex >= 0 &amp;&amp; removeIndex &lt; items.length;</span>\\n        <span class=\\\"token keyword\\\">final</span> Object<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>removeIndex <span class=\\\"token operator\\\">==</span> takeIndex<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//先判断参数索引位置是不是就是删除索引值，如果是的话就直接删除</span>\\n            <span class=\\\"token comment\\\">// removing front item; just advance</span>\\n            items<span class=\\\"token punctuation\\\">[</span>takeIndex<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">++</span>takeIndex <span class=\\\"token operator\\\">==</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 循环数组的索引调整</span>\\n                takeIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n            count<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//递减队列长度</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>itrs <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span>\\n                itrs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">elementDequeued</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//遍历器的队列出队方法，较复杂</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// an \\\"interior\\\" remove</span>\\n\\n            <span class=\\\"token comment\\\">// slide over all others up through putIndex.</span>\\n            <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> putIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>putIndex<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> removeIndex<span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">int</span> next <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>next <span class=\\\"token operator\\\">==</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span>\\n                    next <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>next <span class=\\\"token operator\\\">!=</span> putIndex<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    items<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> items<span class=\\\"token punctuation\\\">[</span>next<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n                    i <span class=\\\"token operator\\\">=</span> next<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n                    items<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>putIndex <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            count<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>itrs <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span>\\n                itrs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removedAt</span><span class=\\\"token punctuation\\\">(</span>removeIndex<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        notFull<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">signal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 执行完遍历检查和删除的操作后唤醒一个notFull状态下进入等待的线程。</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>用于删除指定位置元素的方法，调用此方法前先加锁</li>\\n<li>遍历器删除和对外提供的remove方法都使用了此方法</li>\\n</ul>\\n<p><strong>阻塞的take()方法</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> E <span class=\\\"token function\\\">take</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lockInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                notEmpty<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">dequeue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>删除队首元素的dequeue方法。这个方法的底层还是调用了dequeue方法。出队前判断队列长度，如果长度为0则进入while循环的等待状态，并且使用while会使得每一次在该位置进入等待状态的线程在被唤醒后都会再次检查队列长度。保证的数据的一致性和安全。</p>\\n<p><strong>限时阻塞的poll方法</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> E <span class=\\\"token function\\\">poll</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> timeout<span class=\\\"token punctuation\\\">,</span> TimeUnit unit<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">long</span> nanos <span class=\\\"token operator\\\">=</span> unit<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toNanos</span><span class=\\\"token punctuation\\\">(</span>timeout<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lockInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nanos <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">return</span> null<span class=\\\"token punctuation\\\">;</span>\\n                nanos <span class=\\\"token operator\\\">=</span> notEmpty<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">awaitNanos</span><span class=\\\"token punctuation\\\">(</span>nanos<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">dequeue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>和限时阻塞的offer类似，会利用一个循环+nanos的结构来使得线程等待指定的时长，<strong>如果没能在这段时间内成功执行出队操作的话，就会返回一个null结束。</strong></p>\\n<h3>2.2.4 检查队首元素</h3>\\n<p><strong>抛出异常的element</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token comment\\\">/**\\n     * Retrieves, but does not remove, the head of this queue.  This method\\n     * differs from {@link #peek peek} only in that it throws an exception if\\n     * this queue is empty.\\n     *\\n     * &lt;p>This implementation returns the result of &lt;tt>peek&lt;/tt>\\n     * unless the queue is empty.\\n     *\\n     * @return the head of this queue\\n     * @throws NoSuchElementException if this queue is empty\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> E <span class=\\\"token function\\\">element</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        E x <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">peek</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">return</span> x<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">else</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">NoSuchElementException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n</code></pre>\\n      </div>\\n<p>这个方法位于抽象类AbstractQueue中。不过方法本身调用了带返回值的peek方法。然后根据场景，只要队首返回元素为null的话就抛出异常NoSuchElementException。</p>\\n<p><strong>返回队首元素的peek</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> E <span class=\\\"token function\\\">peek</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">itemAt</span><span class=\\\"token punctuation\\\">(</span>takeIndex<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// null when queue is empty</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token keyword\\\">final</span> E <span class=\\\"token function\\\">itemAt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>E<span class=\\\"token punctuation\\\">)</span> items<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n</code></pre>\\n      </div>\\n<p>返回队首元素的peek方法也是做了同步处理的。注意ArrayBlockingQueue是不允许null元素的。所以当返回的队首元素为null的时候即表示队列为空了。<strong>这里就是API里面描述的，peek方法在队列为空的时候返回null而element方法抛出异常。</strong>并且element方法定义在抽象类AbstractQueue中，所以这个方法可以说是通用的，就是调用peek方法然后检查返回值是否为null。</p>\\n<h1>三 综述</h1>\\n<p>阻塞队列本身位于concurrent并发包下，接口blockingquene有多个不同的实现。这个接口本身的实现类都会常用的接口性修改方法做了同步处理。</p>\\n<p>典型的ArrayBlockingQuene类，其内部实现基于一个定长的对象数组。而且这个类没有默认的构造函数，所有的构造函数都要求给出队列初始化的长度。即没有默认长度。其同步操作基于可重入锁reentrantlock，并且把插入和删除操作分组管理，每一组都有各自的condition对象(共计两个condition对象)。相比使用synchronized关键字和我们平常自己实现的“生产-消费者”模型，这种实现逻辑能达成更好的细粒度控制。</p>\",\"frontmatter\":{\"date\":\"March 18, 2018\",\"path\":\"/BlockingQueue-ArrayBlockingQueue\",\"title\":\"BlockingQueue-ArrayBlockingQueue 源码解析\",\"author\":\"MelodyFrom\",\"dsct\":null}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blocking-queue-array-blocking-queue-c43dadcdf7459cfbb264.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>一 简述</h1>\\n<p>API文档阅读理解的信息：</p>\\n<p>一种支持额外操作的队列接口(BlockingQueue)，当队列为空的时候，向队列获取元素可以一直等到队列转换为<strong>非空状态</strong>。而当队列已满的时候，从队列获取元素可以一直等到队列已腾出空间。</p>\\n<p>队列的操作方法大致可以分为四种类型</p>\\n<ol>\\n<li>队列满或空的时候，插入或删除元素抛出异常</li>\\n<li>队列满或空的时候，插入或删除元素返回一个特殊值(null或者false)</li>\\n<li>队列满或空的时候，插入或删除元素的线程阻塞直到操作成功</li>\\n<li>队列满或空的时候，插入或删除元素的线程会阻塞一个指定的时长然后放弃</li>\\n</ol>\\n<table>\\n<thead>\\n<tr>\\n<th>操作</th>\\n<th>抛出异常</th>\\n<th>返回特殊值</th>\\n<th>阻塞</th>\\n<th>限时阻塞</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>插入</td>\\n<td>add(e)</td>\\n<td>offer(e)</td>\\n<td>put(e)</td>\\n<td>offer(e, time, unit)</td>\\n</tr>\\n<tr>\\n<td>删除</td>\\n<td>remove()</td>\\n<td>poll()</td>\\n<td>take()</td>\\n<td>poll(time, unit)</td>\\n</tr>\\n<tr>\\n<td>检查</td>\\n<td>element()</td>\\n<td>peek()</td>\\n<td></td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>注：此表出自api文档</p>\\n<p><strong>阻塞队列不接受null元素，它的一系列实现类都会在尝试插入null时抛出空指针异常。</strong></p>\\n<p>阻塞队列不同的实现会对队列长度有不同的定义。不被限制容量的队列的剩余长度是Integer.MAX。</p>\\n<p>阻塞队列是线程安全的，大多数是基于内部锁或者其他同步机制实现。不过批量操作比如<strong>addAll,containsAll,retainAll和removeAll不一定安全。</strong></p>\\n<p>另外，阻塞队列十分适合应用于“生产-消费者模型”的场景。</p>\\n<h1>二 典型实现 ArrayBlockingQueue</h1>\\n<p>基于数组实现的长度一定的阻塞队列，这个队列保持着FIFO先进先出的顺序。队首的元素是在队列中保存时间最长的；队尾的元素是在队列中保存时间最短的。新的元素入队都是加入到队尾，元素出队都是从队首元素获取。</p>\\n<p>作为一个典型的<strong>指定长度的阻塞队列</strong>，一旦被创建，这个队列的长度就不会再改变。向已满的队列插入元素和向空队列获取元素都可以进入阻塞状态。</p>\\n<p><strong>支持遍历器的通用操作</strong></p>\\n<h2>2.1 类成员</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token comment\\\">/** The queued items */</span>\\n    <span class=\\\"token keyword\\\">final</span> Object<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> items<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/** items index for next take, poll, peek or remove */</span>\\n    <span class=\\\"token keyword\\\">int</span> takeIndex<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/** items index for next put, offer, or add */</span>\\n    <span class=\\\"token keyword\\\">int</span> putIndex<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/** Number of elements in the queue */</span>\\n    <span class=\\\"token keyword\\\">int</span> count<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/*\\n     * Concurrency control uses the classic two-condition algorithm\\n     * found in any textbook.\\n     */</span>\\n\\n    <span class=\\\"token comment\\\">/** Main lock guarding all access */</span>\\n    <span class=\\\"token keyword\\\">final</span> ReentrantLock lock<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/** Condition for waiting takes */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> Condition notEmpty<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/** Condition for waiting puts */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> Condition notFull<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/**\\n     * Shared state for currently active iterators, or null if there\\n     * are known not to be any.  Allows queue operations to update\\n     * iterator state.\\n     */</span>\\n    <span class=\\\"token keyword\\\">transient</span> Itrs itrs <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>items：用于容纳队列中元素的底层对象数组。注意关键字<strong>final</strong>，也就是说一旦被初始化，这个数组的长度就是不可变的。</li>\\n<li>takeIndex：阻塞队列内部维护的一个“指针”，这是一个队列的“尾指针”。指向队列中即将被删除、出队的元素</li>\\n<li>putIndex：阻塞队列内部维护的另一个“指针”，这是一个队列的“头指针”。指向队列中刚刚被插入的元素</li>\\n<li>count：队列中的size字段</li>\\n</ul>\\n<p>这个阻塞队列的实现里总计有一个锁lock、两个条件对象notEmpty与notFull，分别用于不同的场景</p>\\n<ul>\\n<li>lock：用于数据访问保护的锁</li>\\n<li>notEmpty 队列非空条件，用于获取元素时的场景</li>\\n<li>notFull 队列未满条件，用于插入元素时的场景</li>\\n</ul>\\n<p>这里可以着重了解一下源代码中关于这两个condition对象notEmpty与notFull的应用方式。这本身就是lock对象比synchronized关键字的同步控制更为精细的地方，如何为线程分组，如何去更细粒度的控制唤醒指定的线程组。</p>\\n<p><strong>同时由于只有一个retreenlock实例，所以不会真正的存在结构性修改的方法并行的场景，这些结构性修改方法都是互斥的。</strong></p>\\n<h2>2.2 方法API</h2>\\n<h3>2.2.1 构造函数</h3>\\n<p>注意在编写了三个含参的构造函数后，没有给出无参构造。这个阻塞队列因此就没有无参构造。所有的构造函数都要求给出具体的队列size值。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token comment\\\">//指定队列容量的构造，默认是一个非公平阻塞队列</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">ArrayBlockingQueue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> capacity<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">(</span>capacity<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token comment\\\">//指定队列容量和队列公平性的阻塞队列，这里初始化锁对象和两个条件对象，指定lock为公平锁</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">ArrayBlockingQueue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> capacity<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">boolean</span> fair<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>capacity <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>items <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">[</span>capacity<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ReentrantLock</span><span class=\\\"token punctuation\\\">(</span>fair<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        notEmpty <span class=\\\"token operator\\\">=</span> lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">newCondition</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        notFull <span class=\\\"token operator\\\">=</span>  lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">newCondition</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token comment\\\">//初始化队列容量、公平策略和来自另一个集合的元素。内部调用前一个包含两个参数的构造。这里的初始化队列元素的部分开始加锁操作。元素顺序遵从集合c的便利顺序。加锁是为了数据在各个线程间的可见性而不是为了保证互斥性。不过正常的逻辑都是先初始化，再有结构性修改。</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">ArrayBlockingQueue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> capacity<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">boolean</span> fair<span class=\\\"token punctuation\\\">,</span>\\n                              Collection<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">E</span><span class=\\\"token operator\\\">></span> c<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">(</span>capacity<span class=\\\"token punctuation\\\">,</span> fair<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Lock only for visibility, not mutual exclusion</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>E e <span class=\\\"token operator\\\">:</span> c<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token function\\\">checkNotNull</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    items<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//“头插”的顺序</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">ArrayIndexOutOfBoundsException</span> ex<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            count <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 循环结束后累加队列size值</span>\\n            putIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">==</span> capacity<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">:</span> i<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 更新用于插入操作的索引，判断这个值目前还是不是0</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 释放锁</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>2.2.2 插入操作</h3>\\n<p><strong>返回true or false的offer入队操作</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">offer</span><span class=\\\"token punctuation\\\">(</span>E e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">checkNotNull</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">==</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//队列已满则返回false表示插入失败</span>\\n            <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token function\\\">enqueue</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    \\n    <span class=\\\"token comment\\\">/**\\n     * Inserts element at current put position, advances, and signals.\\n     * Call only when holding lock.\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">enqueue</span><span class=\\\"token punctuation\\\">(</span>E x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// assert lock.getHoldCount() == 1;</span>\\n        <span class=\\\"token comment\\\">// assert items[putIndex] == null;</span>\\n        <span class=\\\"token keyword\\\">final</span> Object<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">;</span>\\n        items<span class=\\\"token punctuation\\\">[</span>putIndex<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">++</span>putIndex <span class=\\\"token operator\\\">==</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span>\\n            putIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n        count<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n        notEmpty<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">signal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//唤醒一个因为队列为空导致等待的线程，notEmpty为非空条件condition对象。很灵活</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>offer入队操作，注意因为队列不能插入null，所以在check方法里面如果检查到e是null的话会抛出NPE。除此之外，这个方法本身的入队操作只会依据操作结果返回<strong>true或者false</strong>。</p>\\n<p>这里可以看到该队列中的加锁固定格式</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ReentrantLock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//加锁</span>\\n    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n        \\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//finally子句释放锁</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><strong>可以抛出异常的add插入元素</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>E e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">--</span><span class=\\\"token keyword\\\">super</span><span class=\\\"token operator\\\">--</span>\\n    <span class=\\\"token comment\\\">//java.util.AbstractQueue.add(E)</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>E e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">offer</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">else</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IllegalStateException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Queue full\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>可以看到阻塞队列的add操作调用父类的add操作，而父类的add操作还是会因为多态的关系调用到具体实现类里面的offer入队操作。如果插入成功就返回true，否则会抛出<strong>IllegalStateException</strong>。那么对应的，这里除了这个异常，因为调用了原来的offer方法的缘故，也有可能抛出NPE异常。</p>\\n<p>能看到这里也体现了一定的层次结构的设计思想，达到的代码和方法的复用的目的，先从最基础的方法开始编写，然后依次嵌套或者包装写出能达到特定目的的方法。比如这里的offer与add之间的关系。</p>\\n<p>AbstractQueue就是根据前述的方法表格来做了一定的规范限制和方法调用关系限制。后面的具体实现类只要按照标准去实现就好了。整个类的结构看起来就会比较清晰，也会少很多代码的冗余。</p>\\n<p><strong>会阻塞的put方法</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token comment\\\">/**\\n     * Inserts the specified element at the tail of this queue, waiting\\n     * for space to become available if the queue is full.\\n     *\\n     * @throws InterruptedException {@inheritDoc}\\n     * @throws NullPointerException {@inheritDoc}\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span>E e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">checkNotNull</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lockInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">==</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//检查队列长度是否已满，如果满了就进入await方法。其余的出队操作会在操作末尾调用notFull.signal()下次被唤醒再次进入while循环判断一次。直到队列空出类为止。这里的逻辑类似于“double check”</span>\\n                notFull<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token function\\\">enqueue</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//检查通过执行入队操作</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>然后是会阻塞等待的put方法。这个方法会在当队列已满的时候，向其中插入元素会形成阻塞直到插入元素。</p>\\n<p>ps 方法<strong>lock.lockInterruptibly()？</strong></p>\\n<p><strong>限时阻塞的offer</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">offer</span><span class=\\\"token punctuation\\\">(</span>E e<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">long</span> timeout<span class=\\\"token punctuation\\\">,</span> TimeUnit unit<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n\\n        <span class=\\\"token function\\\">checkNotNull</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">long</span> nanos <span class=\\\"token operator\\\">=</span> unit<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toNanos</span><span class=\\\"token punctuation\\\">(</span>timeout<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lockInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">==</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nanos <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                nanos <span class=\\\"token operator\\\">=</span> notFull<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">awaitNanos</span><span class=\\\"token punctuation\\\">(</span>nanos<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token function\\\">enqueue</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n</code></pre>\\n      </div>\\n<p>限时等待方法，注意里面的一个方法<strong>notFull.awaitNanos()</strong>。这个方法不仅仅是API里面用。平时我们自己用作限时等待的场景时，也会用起来很顺手。搭配while循环来使用。</p>\\n<h3>2.2.3 删除队首元素</h3>\\n<p>首先还是从会被复用的基础出队方法开始</p>\\n<p><strong>返回被删除元素或者null的poll</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> E <span class=\\\"token function\\\">poll</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> null <span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">dequeue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token comment\\\">/**\\n     * Extracts element at current take position, advances, and signals.\\n     * Call only when holding lock.\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> E <span class=\\\"token function\\\">dequeue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// assert lock.getHoldCount() == 1;</span>\\n        <span class=\\\"token comment\\\">// assert items[takeIndex] != null;</span>\\n        <span class=\\\"token keyword\\\">final</span> Object<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token annotation punctuation\\\">@SuppressWarnings</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"unchecked\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n        E x <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>E<span class=\\\"token punctuation\\\">)</span> items<span class=\\\"token punctuation\\\">[</span>takeIndex<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        items<span class=\\\"token punctuation\\\">[</span>takeIndex<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//因为这个索引位置的元素已经出队，所以将该位置置空</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">++</span>takeIndex <span class=\\\"token operator\\\">==</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//循环数组的操作，如果出队操作已经走到了队尾，那么久重置索引的位置到队首</span>\\n            takeIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n        count<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>itrs <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span>\\n            itrs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">elementDequeued</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">//TODO</span>\\n        notFull<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">signal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> x<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>与前面一节的入队操作类似，这里有一个单独的如对操作，但是这个方法是有使用条件的，那就是<strong>加锁同步</strong>，不过我们没有在方法里面进行同步，而是要求调用dequeue方法的方法做同步工作。<strong>该方法会返回出队元素或者是返回null。</strong></p>\\n<p><strong>返回true或false的remove(e)</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">remove</span><span class=\\\"token punctuation\\\">(</span>Object o<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>o <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> Object<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> putIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>putIndex<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> takeIndex<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>o<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>items<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">removeAt</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">++</span>i <span class=\\\"token operator\\\">==</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span>\\n                        i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">!=</span> putIndex<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n</code></pre>\\n      </div>\\n<ul>\\n<li>删除指定元素的remove(e)方法。该方法匹配元素的原则是equals方法达成匹配。删除的具体操作在方法removeAt方法中。</li>\\n<li>如果队列中包含多个相同元素，那么只会删除遍历到的第一个元素。</li>\\n<li>删除成功返回true，否则返回false</li>\\n<li>遍历的原则是从takeIndex开始将整个内部数组遍历一遍直到遍历到索引putIndex为止。找到对应元素的位置后就可以调用removeAt来删除指定的元素。</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">removeAt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> removeIndex<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// assert lock.getHoldCount() == 1;</span>\\n        <span class=\\\"token comment\\\">// assert items[removeIndex] != null;</span>\\n        <span class=\\\"token comment\\\">// assert removeIndex >= 0 &amp;&amp; removeIndex &lt; items.length;</span>\\n        <span class=\\\"token keyword\\\">final</span> Object<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>removeIndex <span class=\\\"token operator\\\">==</span> takeIndex<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//先判断参数索引位置是不是就是删除索引值，如果是的话就直接删除</span>\\n            <span class=\\\"token comment\\\">// removing front item; just advance</span>\\n            items<span class=\\\"token punctuation\\\">[</span>takeIndex<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">++</span>takeIndex <span class=\\\"token operator\\\">==</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 循环数组的索引调整</span>\\n                takeIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n            count<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//递减队列长度</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>itrs <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span>\\n                itrs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">elementDequeued</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//遍历器的队列出队方法，较复杂</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// an \\\"interior\\\" remove</span>\\n\\n            <span class=\\\"token comment\\\">// slide over all others up through putIndex.</span>\\n            <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> putIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>putIndex<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> removeIndex<span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">int</span> next <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>next <span class=\\\"token operator\\\">==</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span>\\n                    next <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>next <span class=\\\"token operator\\\">!=</span> putIndex<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    items<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> items<span class=\\\"token punctuation\\\">[</span>next<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n                    i <span class=\\\"token operator\\\">=</span> next<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n                    items<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>putIndex <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            count<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>itrs <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span>\\n                itrs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removedAt</span><span class=\\\"token punctuation\\\">(</span>removeIndex<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        notFull<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">signal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 执行完遍历检查和删除的操作后唤醒一个notFull状态下进入等待的线程。</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>用于删除指定位置元素的方法，调用此方法前先加锁</li>\\n<li>遍历器删除和对外提供的remove方法都使用了此方法</li>\\n</ul>\\n<p><strong>阻塞的take()方法</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> E <span class=\\\"token function\\\">take</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lockInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                notEmpty<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">dequeue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>删除队首元素的dequeue方法。这个方法的底层还是调用了dequeue方法。出队前判断队列长度，如果长度为0则进入while循环的等待状态，并且使用while会使得每一次在该位置进入等待状态的线程在被唤醒后都会再次检查队列长度。保证的数据的一致性和安全。</p>\\n<p><strong>限时阻塞的poll方法</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> E <span class=\\\"token function\\\">poll</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> timeout<span class=\\\"token punctuation\\\">,</span> TimeUnit unit<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">long</span> nanos <span class=\\\"token operator\\\">=</span> unit<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toNanos</span><span class=\\\"token punctuation\\\">(</span>timeout<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lockInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nanos <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">return</span> null<span class=\\\"token punctuation\\\">;</span>\\n                nanos <span class=\\\"token operator\\\">=</span> notEmpty<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">awaitNanos</span><span class=\\\"token punctuation\\\">(</span>nanos<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">dequeue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>和限时阻塞的offer类似，会利用一个循环+nanos的结构来使得线程等待指定的时长，<strong>如果没能在这段时间内成功执行出队操作的话，就会返回一个null结束。</strong></p>\\n<h3>2.2.4 检查队首元素</h3>\\n<p><strong>抛出异常的element</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token comment\\\">/**\\n     * Retrieves, but does not remove, the head of this queue.  This method\\n     * differs from {@link #peek peek} only in that it throws an exception if\\n     * this queue is empty.\\n     *\\n     * &lt;p>This implementation returns the result of &lt;tt>peek&lt;/tt>\\n     * unless the queue is empty.\\n     *\\n     * @return the head of this queue\\n     * @throws NoSuchElementException if this queue is empty\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> E <span class=\\\"token function\\\">element</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        E x <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">peek</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">return</span> x<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">else</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">NoSuchElementException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n</code></pre>\\n      </div>\\n<p>这个方法位于抽象类AbstractQueue中。不过方法本身调用了带返回值的peek方法。然后根据场景，只要队首返回元素为null的话就抛出异常NoSuchElementException。</p>\\n<p><strong>返回队首元素的peek</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> E <span class=\\\"token function\\\">peek</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lock<span class=\\\"token punctuation\\\">;</span>\\n        lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">itemAt</span><span class=\\\"token punctuation\\\">(</span>takeIndex<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// null when queue is empty</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token keyword\\\">final</span> E <span class=\\\"token function\\\">itemAt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>E<span class=\\\"token punctuation\\\">)</span> items<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n</code></pre>\\n      </div>\\n<p>返回队首元素的peek方法也是做了同步处理的。注意ArrayBlockingQueue是不允许null元素的。所以当返回的队首元素为null的时候即表示队列为空了。<strong>这里就是API里面描述的，peek方法在队列为空的时候返回null而element方法抛出异常。</strong>并且element方法定义在抽象类AbstractQueue中，所以这个方法可以说是通用的，就是调用peek方法然后检查返回值是否为null。</p>\\n<h1>三 综述</h1>\\n<p>阻塞队列本身位于concurrent并发包下，接口blockingquene有多个不同的实现。这个接口本身的实现类都会常用的接口性修改方法做了同步处理。</p>\\n<p>典型的ArrayBlockingQuene类，其内部实现基于一个定长的对象数组。而且这个类没有默认的构造函数，所有的构造函数都要求给出队列初始化的长度。即没有默认长度。其同步操作基于可重入锁reentrantlock，并且把插入和删除操作分组管理，每一组都有各自的condition对象(共计两个condition对象)。相比使用synchronized关键字和我们平常自己实现的“生产-消费者”模型，这种实现逻辑能达成更好的细粒度控制。</p>\",\"frontmatter\":{\"date\":\"March 18, 2018\",\"path\":\"/BlockingQueue-ArrayBlockingQueue\",\"title\":\"BlockingQueue-ArrayBlockingQueue 源码解析\",\"author\":\"MelodyFrom\",\"dsct\":null}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_json-loader@0.5.7@json-loader!./.cache/json/blocking-queue-array-blocking-queue.json\n// module id = 523\n// module chunks = 93423786701270"],"sourceRoot":""}